import java.io.*;
import java.sql.*;
import java.nio.file.*;
import java.text.SimpleDateFormat;
import java.util.Date;

public class ImmediateRecovery {
    
    public static void main(String[] args) {
        System.out.println("========================================");
        System.out.println("   MySQLÊï∞ÊçÆÁ¥ßÊÄ•ÊÅ¢Â§çÊ£ÄÊü•Â∑•ÂÖ∑");
        System.out.println("========================================");
        System.out.println("Ê£ÄÊü•Êó∂Èó¥: " + new Date());
        System.out.println();
        
        try {
            // 1. Ê£ÄÊü•MySQLËøûÊé•
            checkMySQLConnection();
            
            // 2. Ê£ÄÊü•ÂΩìÂâçÊï∞ÊçÆÁä∂ÊÄÅ
            checkDataStatus();
            
            // 3. Ê£ÄÊü•ÂèØËÉΩÁöÑÊÅ¢Â§çÊ∫ê
            checkRecoverySources();
            
            // 4. ÂàõÂª∫Á¥ßÊÄ•Â§á‰ªΩ
            createEmergencyBackup();
            
            // 5. ÁîüÊàêÊÅ¢Â§çÂª∫ËÆÆ
            generateRecoveryAdvice();
            
        } catch (Exception e) {
            System.err.println("ÈîôËØØ: " + e.getMessage());
            e.printStackTrace();
        }
    }
    
    private static void checkMySQLConnection() {
        System.out.println("üîç Ê£ÄÊü•MySQLËøûÊé•...");
        
        String[] urls = {
            "jdbc:mysql://localhost:3306/spend?useSSL=false&serverTimezone=UTC",
            "jdbc:mysql://localhost:3306/mysql?useSSL=false&serverTimezone=UTC"
        };
        
        for (String url : urls) {
            try (Connection conn = DriverManager.getConnection(url, "root", "root")) {
                System.out.println("‚úÖ ÊàêÂäüËøûÊé•Âà∞: " + url);
                
                // Ê£ÄÊü•Êï∞ÊçÆÂ∫ìÁâàÊú¨
                try (Statement stmt = conn.createStatement();
                     ResultSet rs = stmt.executeQuery("SELECT VERSION()")) {
                    if (rs.next()) {
                        System.out.println("MySQLÁâàÊú¨: " + rs.getString(1));
                    }
                }
                
                // Ê£ÄÊü•Êï∞ÊçÆÂ∫ìÂàóË°®
                try (Statement stmt = conn.createStatement();
                     ResultSet rs = stmt.executeQuery("SHOW DATABASES")) {
                    System.out.println("ÂèØÁî®Êï∞ÊçÆÂ∫ì:");
                    while (rs.next()) {
                        System.out.println("  - " + rs.getString(1));
                    }
                }
                
                break;
            } catch (SQLException e) {
                System.out.println("‚ùå ËøûÊé•Â§±Ë¥•: " + e.getMessage());
            }
        }
        System.out.println();
    }
    
    private static void checkDataStatus() {
        System.out.println("üîç Ê£ÄÊü•Êï∞ÊçÆÁä∂ÊÄÅ...");
        
        try (Connection conn = DriverManager.getConnection(
                "jdbc:mysql://localhost:3306/spend?useSSL=false&serverTimezone=UTC", 
                "root", "root")) {
            
            // Ê£ÄÊü•Ë°®Áä∂ÊÄÅ
            String[] tables = {"daily_spend", "users", "type"};
            
            for (String table : tables) {
                try (Statement stmt = conn.createStatement();
                     ResultSet rs = stmt.executeQuery(
                         "SELECT COUNT(*) as count FROM " + table)) {
                    if (rs.next()) {
                        int count = rs.getInt("count");
                        System.out.println(table + " Ë°®ËÆ∞ÂΩïÊï∞: " + count);
                        
                        // Â¶ÇÊûúÊòØdaily_spendÔºåËé∑ÂèñÊõ¥Â§ö‰ø°ÊÅØ
                        if (table.equals("daily_spend") && count > 0) {
                            try (Statement stmt2 = conn.createStatement();
                                 ResultSet rs2 = stmt2.executeQuery(
                                     "SELECT MIN(date) as min_date, MAX(date) as max_date FROM daily_spend")) {
                                if (rs2.next()) {
                                    System.out.println("  ÊúÄÊó©ËÆ∞ÂΩï: " + rs2.getString("min_date"));
                                    System.out.println("  ÊúÄÊñ∞ËÆ∞ÂΩï: " + rs2.getString("max_date"));
                                }
                            }
                        }
                    }
                } catch (SQLException e) {
                    System.out.println("‚ùå Êó†Ê≥ïÊü•ËØ¢ " + table + ": " + e.getMessage());
                }
            }
            
            // Ê£ÄÊü•Ë°®ÁªìÊûÑ‰ø°ÊÅØ
            try (Statement stmt = conn.createStatement();
                 ResultSet rs = stmt.executeQuery(
                     "SELECT table_name, table_rows, data_length, create_time " +
                     "FROM information_schema.tables WHERE table_schema = 'spend'")) {
                System.out.println("\nË°®ÁªìÊûÑ‰ø°ÊÅØ:");
                while (rs.next()) {
                    System.out.printf("  %-15s ËÆ∞ÂΩï: %-6d Â§ßÂ∞è: %-10s ÂàõÂª∫: %s\n",
                        rs.getString("table_name"),
                        rs.getLong("table_rows"),
                        formatBytes(rs.getLong("data_length")),
                        rs.getString("create_time"));
                }
            }
            
        } catch (SQLException e) {
            System.out.println("‚ùå Êï∞ÊçÆÂ∫ìËøûÊé•ÈóÆÈ¢ò: " + e.getMessage());
        }
        System.out.println();
    }
    
    private static void checkRecoverySources() {
        System.out.println("üîç Ê£ÄÊü•ÊÅ¢Â§çÊ∫ê...");
        
        // Ê£ÄÊü•MySQLÊï∞ÊçÆÁõÆÂΩï
        String[] mysqlPaths = {
            "C:\\ProgramData\\MySQL\\MySQL Server 8.0\\Data",
            "C:\\Program Files\\MySQL\\MySQL Server 8.0\\Data",
            "C:\\xampp\\mysql\\data"
        };
        
        for (String path : mysqlPaths) {
            File dir = new File(path + "\\spend");
            if (dir.exists() && dir.isDirectory()) {
                System.out.println("‚úÖ ÊâæÂà∞MySQLÊï∞ÊçÆÁõÆÂΩï: " + dir.getAbsolutePath());
                
                File[] files = dir.listFiles((dir1, name) -> 
                    name.toLowerCase().contains("daily_spend"));
                
                if (files != null && files.length > 0) {
                    System.out.println("  daily_spendÁõ∏ÂÖ≥Êñá‰ª∂:");
                    for (File file : files) {
                        System.out.printf("    %s - %s bytes - %s\n",
                            file.getName(), 
                            formatBytes(file.length()),
                            new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date(file.lastModified())));
                    }
                }
            }
        }
        
        // Ê£ÄÊü•Êú¨Âú∞SQLÊñá‰ª∂
        File currentDir = new File(".");
        checkDirectoryForSQL(currentDir, 2);
        
        System.out.println();
    }
    
    private static void checkDirectoryForSQL(File dir, int depth) {
        if (depth <= 0) return;
        
        File[] sqlFiles = dir.listFiles((dir1, name) -> name.toLowerCase().endsWith(".sql"));
        if (sqlFiles != null && sqlFiles.length > 0) {
            System.out.println("  ÊâæÂà∞SQLÊñá‰ª∂Âú®: " + dir.getAbsolutePath());
            for (File file : sqlFiles) {
                System.out.printf("    %s - %s\n", file.getName(), formatBytes(file.length()));
            }
        }
        
        File[] subdirs = dir.listFiles(File::isDirectory);
        if (subdirs != null) {
            for (File subdir : subdirs) {
                if (!subdir.getName().startsWith(".") && !subdir.getName().equals("node_modules")) {
                    checkDirectoryForSQL(subdir, depth - 1);
                }
            }
        }
    }
    
    private static void createEmergencyBackup() {
        System.out.println("üîç ÂàõÂª∫Á¥ßÊÄ•Â§á‰ªΩ...");
        
        String backupDir = "recovery-backup-" + new SimpleDateFormat("yyyyMMdd-HHmmss").format(new Date());
        File backup = new File(backupDir);
        if (!backup.exists()) {
            backup.mkdirs();
        }
        
        try (Connection conn = DriverManager.getConnection(
                "jdbc:mysql://localhost:3306/spend?useSSL=false&serverTimezone=UTC", 
                "root", "root")) {
            
            // ÂàõÂª∫Êï∞ÊçÆÂ§á‰ªΩ
            String[] tables = {"daily_spend", "users", "type", "budget", "daily_weight"};
            
            for (String table : tables) {
                try (Statement stmt = conn.createStatement();
                     ResultSet rs = stmt.executeQuery("SELECT * FROM " + table)) {
                    
                    File backupFile = new File(backup, table + "-backup.csv");
                    try (PrintWriter writer = new PrintWriter(new FileWriter(backupFile))) {
                        
                        ResultSetMetaData meta = rs.getMetaData();
                        int columnCount = meta.getColumnCount();
                        
                        // ÂÜôÂÖ•Ë°®Â§¥
                        for (int i = 1; i <= columnCount; i++) {
                            writer.print(meta.getColumnName(i));
                            if (i < columnCount) writer.print(",");
                        }
                        writer.println();
                        
                        // ÂÜôÂÖ•Êï∞ÊçÆ
                        int rowCount = 0;
                        while (rs.next()) {
                            for (int i = 1; i <= columnCount; i++) {
                                String value = rs.getString(i);
                                if (value != null && value.contains(",")) {
                                    value = "\"" + value.replace("\"", "\"\"") + "\"";
                                }
                                writer.print(value != null ? value : "");
                                if (i < columnCount) writer.print(",");
                            }
                            writer.println();
                            rowCount++;
                        }
                        
                        System.out.println("  Â§á‰ªΩ " + table + " Ë°®: " + rowCount + " Êù°ËÆ∞ÂΩï -> " + backupFile.getName());
                    }
                } catch (SQLException e) {
                    System.out.println("  Ë∑≥Ëøá " + table + " Ë°®: " + e.getMessage());
                }
            }
            
            System.out.println("‚úÖ Á¥ßÊÄ•Â§á‰ªΩÂÆåÊàê: " + backup.getAbsolutePath());
            
        } catch (Exception e) {
            System.out.println("‚ùå Â§á‰ªΩÂàõÂª∫Â§±Ë¥•: " + e.getMessage());
        }
        System.out.println();
    }
    
    private static void generateRecoveryAdvice() {
        System.out.println("üìã ÊÅ¢Â§çÂª∫ËÆÆ:");
        System.out.println();
        System.out.println("1. Á´ãÂç≥Ê£ÄÊü•‰∫åËøõÂà∂Êó•Âøó:");
        System.out.println("   mysql -uroot -proot -e \"SHOW BINARY LOGS;\"");
        System.out.println();
        System.out.println("2. Ê£ÄÊü•Á≥ªÁªüËøòÂéüÁÇπ:");
        System.out.println("   vssadmin list shadows /for=C:");
        System.out.println();
        System.out.println("3. Ê£ÄÊü•MySQLÊï∞ÊçÆÁõÆÂΩï:");
        System.out.println("   C:\\ProgramData\\MySQL\\MySQL Server 8.0\\Data\\spend\\");
        System.out.println();
        System.out.println("4. Êü•ÊâæÊú¨Âú∞Â§á‰ªΩ:");
        System.out.println("   Êü•Áúã recovery-backup-* ÁõÆÂΩï‰∏≠ÁöÑÂ§á‰ªΩÊñá‰ª∂");
        System.out.println();
        System.out.println("5. Â¶ÇÊûú‰ª•‰∏äÊó†ÊïàÔºåËÅîÁ≥ª‰∏ì‰∏öÊï∞ÊçÆÊÅ¢Â§çÊúçÂä°");
    }
    
    private static String formatBytes(long bytes) {
        if (bytes < 1024) return bytes + " B";
        int exp = (int) (Math.log(bytes) / Math.log(1024));
        String pre = "KMGTPE".charAt(exp-1) + "";
        return String.format("%.1f %sB", bytes / Math.pow(1024, exp), pre);
    }
}