package spend.service.impl;

import java.sql.Time;
import java.sql.Timestamp;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.log4j.Logger;
import org.hibernate.SQLQuery;
import org.hibernate.SessionFactory;
import org.hibernate.transform.Transformers;
import org.junit.Test;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;
import org.springframework.stereotype.Service;

import spend.dao.BaseDaoI;
import spend.model.Type;
import spend.pageModel.MType;
import spend.service.TypeServiceI;
import spend.util.DataGrid;

@Service(value="typeService")
public class TypeServiceImpl implements TypeServiceI {

	private static final Logger logger=Logger.getLogger(TypeServiceImpl.class);
	private SessionFactory sessionFactory;
	private BaseDaoI<Type> typeDao;
	@Override
	public DataGrid treegrid(MType mtype) {
		// TODO Auto-generated method stub
		
		String sql="select typeId,name,code,addDate,CASE parentId WHEN 1 THEN '' ELSE parentId END as _parentId,'open' as state from type where typeId <> 1";
		String totalSql="select count(*) from type where typeId <> 1";
		
		SQLQuery sqlQuery=sessionFactory.getCurrentSession().createSQLQuery(sql);
		List typeList=sqlQuery.setResultTransformer(Transformers.ALIAS_TO_ENTITY_MAP).list();
		Long count=Long.valueOf(sessionFactory.getCurrentSession().createSQLQuery(totalSql).uniqueResult().toString());
		
		DataGrid dg=new DataGrid();
		dg.setRows(typeList);
		dg.setTotal(count);
		return dg;
	}
	
	public BaseDaoI<Type> getTypeDao() {
		return typeDao;
	}
	@Autowired
	public void setTypeDao(BaseDaoI<Type> typeDao) {
		this.typeDao = typeDao;
	}
	@Autowired
	public void setSessionFactory(SessionFactory sessionFactory) {
		this.sessionFactory = sessionFactory;
	}

	@Override
	public MType addType(MType mType) {
		// TODO Auto-generated method stub
		Type type=new Type();
		mType.setAddDate(new Timestamp(new Date().getTime()));
		mType.setName("test");
		mType.setCode("testcode");
		mType.set_parentId("1");
		
		BeanUtils.copyProperties(mType, type);
		type.setType(typeDao.get(Type.class, Long.parseLong(mType.get_parentId())));
		typeDao.save(type);
		
		
		return null;
	}
	
}
